generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id                       Int    @id @default(autoincrement())
  hospital_name            String @unique
  hospital_email           String @unique
  hospital_phone           String @unique
  hospital_whatsapp_number String @unique
}

model Department {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  doctors    Doctor[]
  Estimation Estimation[]
}

model Doctor {
  id               Int                  @id @default(autoincrement())
  name             String
  email            String
  phone_number     String
  qualification    String
  departmentId     Int
  departmentName   String               @default("Unknown")
  userId           Int?
  availableFrom    String?
  slotDuration     Int?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  doctorType       String?              @default("Regular")
  bookedSlots      BookedSlot[]         @relation("DoctorToBookedSlot")
  department       Department           @relation(fields: [departmentId], references: [id])
  user             User?                @relation("DoctorUser", fields: [userId], references: [id])
  availability     DoctorAvailability[] @relation("DoctorToAvailability")
  extraSlots       ExtraSlot[]          @relation("DoctorToExtraSlot")
  unavailableDates UnavailableDates[]   @relation("DoctorToUnavailableDate")
  unavailableSlots UnavailableSlot[]    @relation("DoctorToUnavailableSlot")
  appointments     Appointment[]        @relation("DoctorAppointments")
  Estimation       Estimation[]
  Channel          Channel[]
  DoctorAssignment DoctorAssignment[]
  roomNo           String?
  ExtraSlotCount   ExtraSlotCount[]
  SentMessage      SentMessage[]
  LeaveDates       LeaveDates[]
  kmcNumber        String?

  @@index([departmentId], map: "Doctor_departmentId_fkey")
  @@index([userId], map: "Doctor_userId_fkey")
}

model User {
  id             Int            @id @default(autoincrement())
  username       String
  password       String
  role           UserRole
  createdAt      DateTime       @default(now())
  loggedInDate   String?
  loggedInTime   String?
  employeeId     String?        @unique
  isReceptionist Boolean?       @default(false)
  subAdminType   String?
  adminType      String?
  doctors        Doctor[]       @relation("DoctorUser")
  Notification   Notification[]
  activeTokens   ActiveToken[]
  appointments   Appointment[]  @relation("UserAppointments")

  @@map("users")
}

model DoctorAvailability {
  id            Int       @id @default(autoincrement())
  doctorId      Int?
  day           String
  availableFrom String
  slotDuration  Int       @default(20)
  date          String?
  isFuture      Boolean?  @default(false)
  endDate       String?
  startDate     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  doctor        Doctor?   @relation("DoctorToAvailability", fields: [doctorId], references: [id])

  @@index([doctorId], map: "DoctorAvailability_doctorId_fkey")
}

model UnavailableDates {
  id       Int      @id @default(autoincrement())
  doctorId Int?
  date     DateTime
  doctor   Doctor?  @relation("DoctorToUnavailableDate", fields: [doctorId], references: [id])

  @@index([doctorId], map: "UnavailableDates_doctorId_fkey")
}

model Appointment {
  id                  Int               @id @default(autoincrement())
  patientName         String
  phoneNumber         String
  email               String
  doctorId            Int?
  doctorName          String
  department          String
  date                String
  time                String
  requestVia          String?
  smsSent             Boolean?          @default(false)
  emailSent           Boolean?          @default(false)
  status              AppointmentStatus @default(pending)
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  userId              Int?
  lockedBy            Int?
  lockExpiresAt       DateTime?
  patientId           Int?
  prnNumber           Int?
  checkedIn           Boolean?          @default(false)
  remainder1Sent      Boolean?          @default(false)
  remainder2Sent      Boolean?          @default(false)
  messageSent         Boolean?          @default(false)
  doctor              Doctor?           @relation("DoctorAppointments", fields: [doctorId], references: [id])
  patient             Patient?          @relation("AppointmentToPatient", fields: [patientId], references: [id])
  user                User?             @relation("UserAppointments", fields: [userId], references: [id])
  checkedOut          Boolean?          @default(false)
  checkedInTime       DateTime?
  checkedOutTime      DateTime?
  waitingTime         String?
  endConsultation     Boolean?
  postPond            Boolean?
  endConsultationTime DateTime?
  extraWaitingTime    Int?
  checkedInBy         String?
  isTransfer          Boolean?
  isCloseOPD          Boolean?
  isCloseOPDTime      DateTime?
  isAccepted          Boolean?
  isAcceptedCloseTime DateTime?
  timeGap             String?
  type                String?
  age                 String?
  gender              String?
  serviceId           Int?
  nameChangedBy       String?
  referredDeptId      Int?
  referredDept        String?
  referredDocId       Int?
  referredDoc         String?
  isReferred          Boolean?
  isNew               Boolean?
  prefix              String?
  patientType         String?
  isfollowup          Boolean?
  isFollowupTime      DateTime?
  BPd                 String?
  BPs                 String?
  RR                  String?
  bloodGroup          String?
  height              String?
  pulse               String?
  spo2                String?
  temp                String?
  weight              String?
  arrivedTime         DateTime?
  arrivedBy           String?
  blockId             String?
  arrived             Boolean?

  @@index([doctorId], map: "appointments_doctorId_fkey")
  @@index([patientId], map: "appointments_patientId_fkey")
  @@index([userId], map: "appointments_userId_fkey")
  @@map("appointments")
}

model BookedSlot {
  id        Int      @id @default(autoincrement())
  doctorId  Int?
  date      String
  time      String
  createdAt DateTime @default(now())
  complete  Boolean? @default(false)
  doctor    Doctor?  @relation("DoctorToBookedSlot", fields: [doctorId], references: [id])

  @@index([doctorId], map: "BookedSlot_doctorId_fkey")
}

model UnavailableSlot {
  id       Int     @id @default(autoincrement())
  doctorId Int?
  time     String
  date     String
  doctor   Doctor? @relation("DoctorToUnavailableSlot", fields: [doctorId], references: [id])

  @@unique([doctorId, date, time])
}

model Patient {
  id           Int           @id @default(autoincrement())
  prn          Int           @unique
  name         String
  phoneNumber  String
  email        String
  age          Int?
  gender       Int?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  appointments Appointment[] @relation("AppointmentToPatient")
}

model PatientDetails {
  id              Int       @id @default(autoincrement())
  prn             Int       @unique
  name            String
  foreignNational Boolean?
  contactNo       String?
  mobileNo        String?
  email           String?
  age             String?
  gender          String?
  address         String?
  country         String?
  state           String?
  district        String?
  city            String?
  area            String?
  pin             String?
  BPd             String?
  BPs             String?
  RR              String?
  bloodGroup      String?
  height          String?
  patientType     String?
  pulse           String?
  spo2            String?
  temp            String?
  weight          String?
  dob             String?
  rh              String?
  hb              String?
  sFerritin       String?
  diagnosis       String?
  created_at      DateTime  @default(now())
  updated_at      DateTime?
}

model ActiveToken {
  id         Int     @id @default(autoincrement())
  userId     Int
  token      String  @unique @db.VarChar(500)
  loggedInAt String
  lastActive String
  isActive   Boolean @default(true)
  user       User    @relation(fields: [userId], references: [id])

  @@index([userId], map: "active_tokens_userId_fkey")
  @@map("active_tokens")
}

model ExtraSlot {
  id       Int     @id @default(autoincrement())
  doctorId Int?
  date     String
  time     String
  doctor   Doctor? @relation("DoctorToExtraSlot", fields: [doctorId], references: [id])

  @@index([doctorId, date, time], map: "unique_slot")
}

model Notification {
  id         Int       @id @default(autoincrement())
  type       String
  title      String
  message    String
  status     String    @default("unread")
  entityId   Int?
  entityType String?
  createdAt  DateTime  @default(now())
  sentAt     DateTime?
  viewedAt   DateTime?
  isCritical Boolean   @default(false)
  expiresAt  DateTime?
  targetRole String?
  userId     Int?
  User       User?     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Notification_userId_fkey")
}

model Service {
  id                        Int            @id @default(autoincrement())
  pnrNumber                 String?
  firstName                 String
  lastName                  String?
  phoneNumber               String
  email                     String?
  appointmentDate           String
  appointmentTime           String?
  repeatChecked             Boolean        @default(false)
  daysInterval              Int?
  numberOfTimes             Int?
  requestVia                String
  appointmentStatus         String         @default("pending")
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  checkedIn                 Boolean?       @default(false)
  emailSent                 Boolean?       @default(false)
  messageSent               Boolean?       @default(false)
  smsSent                   Boolean?       @default(false)
  packageId                 Int            @default(0)
  packageName               String
  package                   Package?       @relation(fields: [packageId], references: [id])
  repeatedDates             RepeatedDate[]
  lockedBy                  Int?
  userId                    Int?
  username                  String?
  role                      UserRole?
  checkedInTime             DateTime?
  isLab                     Boolean?
  isLabTime                 DateTime?
  chestXRay                 Boolean?
  ultrasound                Boolean?
  boneDensitometry          Boolean?
  mammography               Boolean?
  ecg                       Boolean?
  echoTMT                   Boolean?
  usgEcho                   Boolean?
  chestXRayTime             DateTime?
  ultrasoundTime            DateTime?
  boneDensitometryTime      DateTime?
  mammographyTime           DateTime?
  ecgTime                   DateTime?
  echoTMTTime               DateTime?
  usgEchoTime               DateTime?
  chestXRayEntryTime        DateTime?
  ultrasoundEntryTime       DateTime?
  boneDensitometryEntryTime DateTime?
  mammographyEntryTime      DateTime?
  ecgEntryTime              DateTime?
  echoTMTEntryTime          DateTime?
  usgEchoEntryTime          DateTime?
  isLabEntryTime            DateTime?
  RadioService              RadioService?  @relation(fields: [radioServiceId], references: [id])
  radioServiceId            Int?
  age                       Int?
  gender                    String?
  prefix                    String?
  patientType               String?
  isLabEntry1Time           DateTime?
}

model RepeatedDate {
  id        Int     @id @default(autoincrement())
  date      String
  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id])

  @@index([serviceId], map: "RepeatedDate_serviceId_fkey")
}

model Package {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deptIds     String?
  radioIds    String?

  services Service[] // Back relation to Service

  orders InvestigationOrder[]
}

model RadioService {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  services            Service[] // Back relation to Service
  ServiceAppointments ServiceAppointments[]
}

model ServiceAppointments {
  id                Int           @id @default(autoincrement())
  pnrNumber         String?
  firstName         String
  lastName          String?
  phoneNumber       String
  email             String?
  appointmentDate   String
  appointmentTime   String?
  requestVia        String
  appointmentStatus String        @default("pending")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  checkedIn         Boolean?      @default(false)
  lockedBy          Int?
  userId            Int?
  username          String?
  role              UserRole?
  checkedInTime     DateTime?
  checkedOut        Boolean?
  checkedOutTime    DateTime?
  age               Int?
  gender            String?
  RadioService      RadioService? @relation(fields: [radioServiceId], references: [id])
  radioServiceId    Int?
  radioServiceName  String?
  emailSent         Boolean?      @default(false)
  messageSent       Boolean?      @default(false)
  smsSent           Boolean?      @default(false)
  serviceId         Int?
  entry             Boolean?
  entryTime         DateTime?
  postPond          Boolean?
  postPondTime      DateTime?
  entryDoneBy       String?
  reportDoneBy      String?
  prefix            String?
  patientType       String?
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
  completed
  rescheduled
}

enum UserRole {
  super_admin
  sub_admin
  admin
  doctor
  unknown
}

model Estimation {
  id             Int      @id @default(autoincrement())
  doctorId       Int
  departmentId   Int
  estimation     String
  estimationType String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  doctor     Doctor     @relation(fields: [doctorId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])
}

model Channel {
  id                Int                @id @default(autoincrement())
  name              String // Channel name or identifier
  channelId         Int                @unique
  doctorId          Int? // Doctor ID
  doctors           Doctor?            @relation(fields: [doctorId], references: [id]) // Relation with Doctor model
  doctorAssignments DoctorAssignment[] @relation("ChannelToDoctorAssignment") // Opposite relation to DoctorAssignment
  roomNumber        String?
}

model ExtraSlotCount {
  id               Int      @id @default(autoincrement())
  doctorId         Int
  doctor           Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  date             String
  extraHoursBefore String
  extraHoursAfter  String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  timeRange        String?
}

model DoctorAssignment {
  id             Int     @id @default(autoincrement())
  channelId      Int
  doctorId       Int
  departmentName String
  channel        Channel @relation("ChannelToDoctorAssignment", fields: [channelId], references: [channelId]) // Relation to Channel
  doctor         Doctor  @relation(fields: [doctorId], references: [id]) // Relation to Doctor

  @@index([channelId])
  @@index([doctorId])
}

model EstimationDetails {
  id                      Int            @id @default(autoincrement()) // Unique Number
  estimationId            String         @unique // Unique Number
  patientName             String // String
  patientPhoneNumber      String // String
  patientUHID             Int? // String
  ageOfPatient            Int? // Number
  genderOfPatient         String? // String
  consultantId            Int // Number
  consultantName          String // String
  estimationName          String // String
  estimationPreferredDate String // String
  remarks                 String? // String (Optional)
  totalDaysStay           Int? // Number
  icuStay                 Int? // Number (Optional)
  wardStay                Int? // Number (Optional)
  roomType                String? // String (Optional)
  inclusions              Inclusion[] // Related Table
  exclusions              Exclusion[] // Related Table
  estimatedDate           String? // String
  estimationCost          Int? // Number
  discountPercentage      Int? // Number
  totalEstimationAmount   Int? // Number
  advanceAmountPaid       Int? // Number
  receiptNumber           String? // String
  followUpDates           FollowUpDate[] // Separate Table
  employeeId              String? // String
  approverId              String? // String
  patientSign             String?        @db.Text // Sign
  employeeSign            String?        @db.Text // Sign
  approverSign            String?        @db.Text // Sign
  approvedDateAndTime     DateTime? // Date
  estimationCreatedTime   DateTime? // String
  messageSentDateAndTime  DateTime? // Date
  pdfLink                 String? // String
  pacDone                 Boolean? // Boolean
  statusOfEstimation      String? // String
  ageBucketOfSurgery      Int? // Number
  estimationType          String // String
  messageSent             Boolean?
  signatureOf             String?
  employeeName            String?
  approverName            String?
  cancellerName           String?
  cancellerId             String?
  feedback                String?
  attenderName            String?
  lockedBy                Int?
  userId                  Int?
  surgeryTime             String?
  cancellationDateAndTime DateTime?
  confirmedDateAndTime    DateTime?
  completedDateAndTime    DateTime?
  overDueDateAndTIme      DateTime?
  estimationStatus        String?
  pacAmountPaid           String?
  pacReceiptNumber        String?
  submittedDateAndTime    DateTime?
  staffRemarks            String?
  patientRemarks          String?
  surgeryPackage          String?
  implants                String?
  instrumentals           String?
  procedures              String?
  multipleSurgeries       String?
  multipleEstimationCost  String?
  costForGeneral          String?
  costForPrivate          String?
  costForSemiPrivate      String?
  costForVip              String?
  costForDeluxe           String?
  costForPresidential     String?
  selectedRoomCost        String?
  patientEmail            String?
  rejectReason            String?
  pacNotDoneReason        String?

  @@map("estimation_details")
}

model FollowUpDate {
  id                Int                @id @default(autoincrement())
  remarks           String // Remarks or comments
  date              String // Follow-up date
  estimationId      String // Relation to the Estimation table
  EstimationDetails EstimationDetails? @relation(fields: [estimationId], references: [estimationId])

  @@map("follow_up_date")
}

model Inclusion {
  id                Int                @id @default(autoincrement()) // Primary key
  description       String // Inclusion description
  estimationId      String // Foreign key to EstimationDetails
  estimationDetails EstimationDetails? @relation(fields: [estimationId], references: [estimationId])

  @@map("inclusions")
}

model Exclusion {
  id                Int                @id @default(autoincrement()) // Primary key
  description       String // Exclusion description
  estimationId      String // Foreign key to EstimationDetails
  estimationDetails EstimationDetails? @relation(fields: [estimationId], references: [estimationId])

  @@map("exclusions")
}

model Maintenance {
  id        Int      @id @default(autoincrement())
  isActive  Boolean  @default(false) // TRUE means maintenance is ON
  message   String   @default("The system is under maintenance. Please try again later.")
  updatedAt DateTime @updatedAt

  @@map("maintenance")
}

model SentMessage {
  id        Int      @id @default(autoincrement())
  doctorId  Int
  alertType String   @db.VarChar(50) // Type of alert (e.g., "lateLogin", "adminAlert")
  sentAt    DateTime @default(now()) // Timestamp when the message was sent

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, alertType, sentAt], map: "unique_daily_alert") // Ensures only one alert per doctor per day
  @@index([doctorId], map: "sentMessages_doctorId_fkey")
  @@map("sent_messages") // Actual DB table name
}

model LeaveDates {
  id       Int      @id @default(autoincrement())
  doctorId Int?
  date     DateTime
  Doctor   Doctor?  @relation(fields: [doctorId], references: [id])

  @@index([doctorId], map: "LeaveDates_doctorId_fkey")
}

model Advertisement {
  id         Int      @id @default(autoincrement())
  type       String   @db.VarChar(10) // "text", "image", "video"
  content    String   @db.Text // Stores text for text ads, file path for media ads
  uploadedAt DateTime @default(now())
  isActive   Boolean?
}

model BloodGroup {
  id                Int                     @id @default(autoincrement())
  name              String                  @unique
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  bloodAppointments BloodGroupAppointment[]
}

model BloodGroupAppointment {
  id                Int                      @id @default(autoincrement())
  pnrNumber         String?
  firstName         String
  lastName          String?
  phoneNumber       String
  email             String?
  appointmentDate   String
  appointmentSlot   String?
  repeatChecked     Boolean                  @default(false)
  daysInterval      Int?
  numberOfTimes     Int?
  requestVia        String
  appointmentStatus String                   @default("pending")
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  checkedIn         Boolean?                 @default(false)
  emailSent         Boolean?                 @default(false)
  messageSent       Boolean?                 @default(false)
  smsSent           Boolean?                 @default(false)
  bloodGroupId      Int
  bloodGroup        BloodGroup               @relation(fields: [bloodGroupId], references: [id])
  repeatedDates     BloodGroupRepeatedDate[]
  lockedBy          Int?
  userId            Int?
  username          String?
  role              UserRole?
  checkedInTime     DateTime?
  age               String?
  gender            String?
  prefix            String?
}

model BloodGroupRepeatedDate {
  id                      Int                   @id @default(autoincrement())
  date                    String
  bloodGroupAppointmentId Int
  bloodGroupAppointment   BloodGroupAppointment @relation(fields: [bloodGroupAppointmentId], references: [id])

  @@index([bloodGroupAppointmentId], map: "BloodGroupRepeatedDate_appointmentId_fkey")
}

model Prescription {
  id              Int      @id @default(autoincrement())
  prescriptionId  String   @unique
  prescribedBy    String
  prescribedById  String?
  prescribedByKMC String?
  prescribedDate  String
  prn             String
  patientName     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tablets         Tablet[] @relation("PrescriptionTablets")
}

model Tablet {
  id             Int          @id @default(autoincrement())
  genericName    String
  brandName      String
  frequency      String
  duration       String
  instructions   String
  quantity       Int
  prescriptionId String
  route          String?      @default("oral")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  prescription   Prescription @relation("PrescriptionTablets", fields: [prescriptionId], references: [prescriptionId], onDelete: Cascade)

  @@index([prescriptionId], map: "Tablet_prescriptionId_fkey")
}

model TabletMaster {
  id             Int              @id @default(autoincrement())
  genericName    String
  brandName      String
  type           String
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  FavoriteTablet FavoriteTablet[]
}

model FavoriteTablet {
  id           Int          @id @default(autoincrement())
  userId       String
  tabletId     Int
  createdAt    DateTime     @default(now())
  duration     String?
  frequency    String?
  instructions String?
  tablet       TabletMaster @relation(fields: [tabletId], references: [id])

  @@unique([userId, tabletId])
  @@index([tabletId], map: "FavoriteTablet_tabletId_fkey")
}

model Allergy {
  id          Int      @id @default(autoincrement())
  prn         String
  genericName String
  notedBy     String?
  createdAt   DateTime @default(now())
}

model DoctorNote {
  id                 Int      @id @default(autoincrement())
  prn                Int
  date               String
  chiefComplaints    String?  @db.Text
  diagnosis          String?  @db.Text
  generalExamination String?  @db.Text
  clinicalNotes      String?  @db.Text
  advice             String?  @db.Text
  cvs                String?  @db.Text
  rs                 String?  @db.Text
  cns                String?  @db.Text
  pa                 String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model HistoryNotes {
  id             Int      @id @default(autoincrement())
  prn            Int
  date           String
  medicalHistory String?  @db.Text
  familyHistory  String?  @db.Text
  socialHistory  String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Lab {
  id          Int      @id @default(autoincrement())
  description String
  department  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders InvestigationOrder[]
}

model Radiology {
  id          Int      @id @default(autoincrement())
  description String
  department  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders InvestigationOrder[]
}

model InvestigationOrder {
  id         Int     @id @default(autoincrement())
  prn        String
  date       String
  doctorId   Int
  doctorName String
  remarks    String?

  labTests       Lab[]
  radiologyTests Radiology[]
  packages       Package[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
