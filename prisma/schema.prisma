generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id                       Int    @id @default(autoincrement())
  hospital_name            String @unique
  hospital_email           String @unique
  hospital_phone           String @unique
  hospital_whatsapp_number String @unique
}

model Department {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @updatedAt
  userId     Int?
  doctors    Doctor[]
  Estimation Estimation[]
}

model Doctor {
  id               Int                  @id @default(autoincrement())
  name             String
  email            String
  phone_number     String
  qualification    String
  departmentId     Int
  departmentName   String               @default("Unknown")
  userId           Int?
  availableFrom    String?
  slotDuration     Int?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  doctorType       String?              @default("Regular")
  roomNo           String?
  kmcNumber        String?
  createdBy        String?
  updatedBy        String?
  isActive         Boolean?             @default(true)
  bookedSlots      BookedSlot[]         @relation("DoctorToBookedSlot")
  Channel          Channel[]
  department       Department           @relation(fields: [departmentId], references: [id])
  user             User?                @relation("DoctorUser", fields: [userId], references: [id])
  DoctorAssignment DoctorAssignment[]
  availability     DoctorAvailability[] @relation("DoctorToAvailability")
  Estimation       Estimation[]
  extraSlots       ExtraSlot[]          @relation("DoctorToExtraSlot")
  ExtraSlotCount   ExtraSlotCount[]
  LeaveDates       LeaveDates[]
  unavailableDates UnavailableDates[]   @relation("DoctorToUnavailableDate")
  unavailableSlots UnavailableSlot[]    @relation("DoctorToUnavailableSlot")
  appointments     Appointment[]        @relation("DoctorAppointments")
  SentMessage      SentMessage[]

  @@index([departmentId], map: "Doctor_departmentId_fkey")
  @@index([userId], map: "Doctor_userId_fkey")
}

model User {
  id             Int            @id @default(autoincrement())
  username       String
  password       String
  role           UserRole
  createdAt      DateTime       @default(now())
  loggedInDate   String?
  loggedInTime   String?
  employeeId     String?        @unique
  isReceptionist Boolean?       @default(false)
  subAdminType   String?
  adminType      String?
  createdBy      String?
  updatedBy      String?
  doctors        Doctor[]       @relation("DoctorUser")
  Notification   Notification[]
  activeTokens   ActiveToken[]
  appointments   Appointment[]  @relation("UserAppointments")

  @@map("users")
}

model DoctorAvailability {
  id            Int       @id @default(autoincrement())
  doctorId      Int?
  day           String
  availableFrom String
  slotDuration  Int       @default(20)
  date          String?
  isFuture      Boolean?  @default(false)
  endDate       String?
  startDate     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  createdBy     String?
  doctor        Doctor?   @relation("DoctorToAvailability", fields: [doctorId], references: [id])

  @@index([doctorId], map: "DoctorAvailability_doctorId_fkey")
}

model UnavailableDates {
  id        Int       @id @default(autoincrement())
  doctorId  Int?
  date      DateTime
  createdAt DateTime? @default(now())
  createdBy String?
  updatedAt DateTime? @updatedAt
  doctor    Doctor?   @relation("DoctorToUnavailableDate", fields: [doctorId], references: [id])

  @@index([doctorId], map: "UnavailableDates_doctorId_fkey")
}

model Appointment {
  id                  Int               @id @default(autoincrement())
  patientName         String
  phoneNumber         String
  email               String
  doctorId            Int?
  doctorName          String
  department          String
  date                String
  time                String
  requestVia          String?
  smsSent             Boolean?          @default(false)
  emailSent           Boolean?          @default(false)
  status              AppointmentStatus @default(pending)
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  userId              Int?
  lockedBy            Int?
  lockExpiresAt       DateTime?
  patientId           Int?
  prnNumber           Int?
  checkedIn           Boolean?          @default(false)
  remainder1Sent      Boolean?          @default(false)
  remainder2Sent      Boolean?          @default(false)
  messageSent         Boolean?          @default(false)
  checkedOut          Boolean?          @default(false)
  checkedInTime       DateTime?
  checkedOutTime      DateTime?
  waitingTime         String?
  endConsultation     Boolean?
  postPond            Boolean?
  endConsultationTime DateTime?
  checkedInBy         String?
  extraWaitingTime    Int?
  isTransfer          Boolean?
  isAcceptedCloseTime DateTime?
  isCloseOPD          Boolean?
  isCloseOPDTime      DateTime?
  timeGap             String?
  isAccepted          Boolean?
  type                String?
  age                 String?
  gender              String?
  serviceId           Int?
  nameChangedBy       String?
  referredDept        String?
  referredDeptId      Int?
  referredDoc         String?
  referredDocId       Int?
  isReferred          Boolean?
  isNew               Boolean?
  prefix              String?
  patientType         String?
  isFollowupTime      DateTime?
  isfollowup          Boolean?
  BPd                 String?
  BPs                 String?
  RR                  String?
  bloodGroup          String?
  height              String?
  pulse               String?
  spo2                String?
  temp                String?
  weight              String?
  arrived             Boolean?
  arrivedBy           String?
  arrivedTime         DateTime?
  blockId             String?
  doctor              Doctor?           @relation("DoctorAppointments", fields: [doctorId], references: [id])
  patient             Patient?          @relation("AppointmentToPatient", fields: [patientId], references: [id])
  user                User?             @relation("UserAppointments", fields: [userId], references: [id])

  @@index([doctorId], map: "appointments_doctorId_fkey")
  @@index([patientId], map: "appointments_patientId_fkey")
  @@index([userId], map: "appointments_userId_fkey")
  @@map("appointments")
}

model BookedSlot {
  id        Int       @id @default(autoincrement())
  doctorId  Int?
  date      String
  time      String
  createdAt DateTime  @default(now())
  complete  Boolean?  @default(false)
  createdBy String?
  updatedAt DateTime? @updatedAt
  doctor    Doctor?   @relation("DoctorToBookedSlot", fields: [doctorId], references: [id])

  @@index([doctorId], map: "BookedSlot_doctorId_fkey")
}

model UnavailableSlot {
  id        Int       @id @default(autoincrement())
  doctorId  Int?
  time      String
  date      String
  createdAt DateTime? @default(now())
  createdBy String?
  updatedAt DateTime? @updatedAt
  doctor    Doctor?   @relation("DoctorToUnavailableSlot", fields: [doctorId], references: [id])

  @@unique([doctorId, date, time])
}

model Patient {
  id           Int           @id @default(autoincrement())
  prn          Int           @unique
  name         String
  phoneNumber  String
  email        String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  age          Int?
  gender       Int?
  appointments Appointment[] @relation("AppointmentToPatient")
}

model PatientDetails {
  id              Int       @id @default(autoincrement())
  prn             Int       @unique
  name            String
  foreignNational Boolean?
  contactNo       String?
  mobileNo        String?
  email           String?
  age             String?
  gender          String?
  address         String?
  country         String?
  state           String?
  district        String?
  city            String?
  area            String?
  pin             String?
  created_at      DateTime  @default(now())
  updated_at      DateTime?
  BPd             String?
  BPs             String?
  RR              String?
  bloodGroup      String?
  diagnosis       String?
  dob             String?
  hb              String?
  height          String?
  patientType     String?
  pulse           String?
  rh              String?
  sFerritin       String?
  spo2            String?
  temp            String?
  weight          String?
}

model ActiveToken {
  id         Int     @id @default(autoincrement())
  userId     Int
  token      String  @unique @db.VarChar(500)
  loggedInAt String
  lastActive String
  isActive   Boolean @default(true)
  user       User    @relation(fields: [userId], references: [id])

  @@index([userId], map: "active_tokens_userId_fkey")
  @@map("active_tokens")
}

model ExtraSlot {
  id        Int       @id @default(autoincrement())
  doctorId  Int?
  date      String
  time      String
  createdAt DateTime? @default(now())
  createdBy String?
  updatedAt DateTime? @updatedAt
  doctor    Doctor?   @relation("DoctorToExtraSlot", fields: [doctorId], references: [id])

  @@index([doctorId, date, time], map: "unique_slot")
}

model Notification {
  id         Int       @id @default(autoincrement())
  type       String
  title      String
  message    String
  status     String    @default("unread")
  entityId   Int?
  entityType String?
  createdAt  DateTime  @default(now())
  sentAt     DateTime?
  viewedAt   DateTime?
  isCritical Boolean   @default(false)
  expiresAt  DateTime?
  targetRole String?
  userId     Int?
  User       User?     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Notification_userId_fkey")
}

model Service {
  id                        Int            @id @default(autoincrement())
  pnrNumber                 String?
  firstName                 String
  lastName                  String?
  phoneNumber               String
  email                     String?
  appointmentDate           String
  appointmentTime           String?
  repeatChecked             Boolean        @default(false)
  daysInterval              Int?
  numberOfTimes             Int?
  requestVia                String
  appointmentStatus         String         @default("pending")
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  checkedIn                 Boolean?       @default(false)
  emailSent                 Boolean?       @default(false)
  messageSent               Boolean?       @default(false)
  smsSent                   Boolean?       @default(false)
  packageId                 Int            @default(0)
  packageName               String
  lockedBy                  Int?
  userId                    Int?
  role                      UserRole?
  username                  String?
  checkedInTime             DateTime?
  boneDensitometry          Boolean?
  boneDensitometryTime      DateTime?
  chestXRay                 Boolean?
  chestXRayTime             DateTime?
  ecg                       Boolean?
  ecgTime                   DateTime?
  echoTMT                   Boolean?
  echoTMTTime               DateTime?
  isLab                     Boolean?
  isLabTime                 DateTime?
  mammography               Boolean?
  mammographyTime           DateTime?
  ultrasound                Boolean?
  ultrasoundTime            DateTime?
  usgEcho                   Boolean?
  usgEchoTime               DateTime?
  boneDensitometryEntryTime DateTime?
  chestXRayEntryTime        DateTime?
  ecgEntryTime              DateTime?
  echoTMTEntryTime          DateTime?
  isLabEntryTime            DateTime?
  mammographyEntryTime      DateTime?
  radioServiceId            Int?
  ultrasoundEntryTime       DateTime?
  usgEchoEntryTime          DateTime?
  age                       Int?
  gender                    String?
  prefix                    String?
  patientType               String?
  isLabEntry1Time           DateTime?
  repeatedDates             RepeatedDate[]
  package                   Package        @relation(fields: [packageId], references: [id])
  RadioService              RadioService?  @relation(fields: [radioServiceId], references: [id])

  @@index([packageId], map: "Service_packageId_fkey")
  @@index([radioServiceId], map: "Service_radioServiceId_fkey")
}

model RepeatedDate {
  id        Int     @id @default(autoincrement())
  date      String
  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id])

  @@index([serviceId], map: "RepeatedDate_serviceId_fkey")
}

model Package {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deptIds     String?
  radioIds    String?
  createdBy   String?
  services    Service[]
  orders      InvestigationOrder[] @relation("InvestigationOrderToPackage")
}

model RadioService {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String?
  services            Service[]
  ServiceAppointments ServiceAppointments[]
}

model ServiceAppointments {
  id                Int           @id @default(autoincrement())
  pnrNumber         String?
  firstName         String
  lastName          String?
  phoneNumber       String
  email             String?
  appointmentDate   String
  appointmentTime   String?
  requestVia        String
  appointmentStatus String        @default("pending")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  checkedIn         Boolean?      @default(false)
  lockedBy          Int?
  userId            Int?
  username          String?
  role              UserRole?
  checkedInTime     DateTime?
  checkedOut        Boolean?
  checkedOutTime    DateTime?
  age               Int?
  gender            String?
  radioServiceId    Int?
  radioServiceName  String?
  emailSent         Boolean?      @default(false)
  messageSent       Boolean?      @default(false)
  smsSent           Boolean?      @default(false)
  serviceId         Int?
  entry             Boolean?
  entryTime         DateTime?
  entryDoneBy       String?
  postPond          Boolean?
  postPondTime      DateTime?
  reportDoneBy      String?
  prefix            String?
  patientType       String?
  RadioService      RadioService? @relation(fields: [radioServiceId], references: [id])

  @@index([radioServiceId], map: "ServiceAppointments_radioServiceId_fkey")
}

model Estimation {
  id             Int        @id @default(autoincrement())
  doctorId       Int
  departmentId   Int
  estimation     String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  estimationType String?
  department     Department @relation(fields: [departmentId], references: [id])
  doctor         Doctor     @relation(fields: [doctorId], references: [id])

  @@index([departmentId], map: "Estimation_departmentId_fkey")
  @@index([doctorId], map: "Estimation_doctorId_fkey")
}

model Channel {
  id                Int                @id @default(autoincrement())
  name              String
  channelId         Int                @unique
  doctorId          Int?
  roomNumber        String?
  doctors           Doctor?            @relation(fields: [doctorId], references: [id])
  doctorAssignments DoctorAssignment[] @relation("ChannelToDoctorAssignment")

  @@index([doctorId], map: "Channel_doctorId_fkey")
}

model ExtraSlotCount {
  id               Int      @id @default(autoincrement())
  doctorId         Int
  date             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  extraHoursAfter  String
  extraHoursBefore String
  timeRange        String?
  createdBy        String?
  doctor           Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId], map: "ExtraSlotCount_doctorId_fkey")
}

model DoctorAssignment {
  id             Int     @id @default(autoincrement())
  channelId      Int
  doctorId       Int
  departmentName String
  channel        Channel @relation("ChannelToDoctorAssignment", fields: [channelId], references: [channelId])
  doctor         Doctor  @relation(fields: [doctorId], references: [id])

  @@index([channelId])
  @@index([doctorId])
}

model EstimationDetails {
  id                      Int            @id @default(autoincrement())
  estimationId            String         @unique
  patientName             String
  patientPhoneNumber      String
  patientUHID             Int?
  ageOfPatient            Int?
  genderOfPatient         String?
  consultantId            Int
  consultantName          String
  estimationName          String
  estimationPreferredDate String
  remarks                 String?
  totalDaysStay           Int?
  icuStay                 Int?
  wardStay                Int?
  roomType                String?
  estimatedDate           String?
  estimationCost          Int?
  discountPercentage      Int?
  totalEstimationAmount   Int?
  advanceAmountPaid       Int?
  receiptNumber           String?
  employeeId              String?
  approverId              String?
  patientSign             String?        @db.Text
  employeeSign            String?        @db.Text
  approverSign            String?        @db.Text
  approvedDateAndTime     DateTime?
  estimationCreatedTime   DateTime?
  messageSentDateAndTime  DateTime?
  pdfLink                 String?
  pacDone                 Boolean?
  statusOfEstimation      String?
  ageBucketOfSurgery      Int?
  estimationType          String
  messageSent             Boolean?
  signatureOf             String?
  approverName            String?
  cancellerId             String?
  cancellerName           String?
  employeeName            String?
  feedback                String?
  attenderName            String?
  lockedBy                Int?
  userId                  Int?
  surgeryTime             String?
  cancellationDateAndTime DateTime?
  completedDateAndTime    DateTime?
  confirmedDateAndTime    DateTime?
  overDueDateAndTIme      DateTime?
  estimationStatus        String?
  pacAmountPaid           String?
  pacReceiptNumber        String?
  submittedDateAndTime    DateTime?
  patientRemarks          String?
  staffRemarks            String?
  surgeryPackage          String?
  implants                String?
  instrumentals           String?
  multipleSurgeries       String?
  procedures              String?
  multipleEstimationCost  String?
  costForDeluxe           String?
  costForGeneral          String?
  costForPresidential     String?
  costForPrivate          String?
  costForSemiPrivate      String?
  costForVip              String?
  selectedRoomCost        String?
  patientEmail            String?
  rejectReason            String?
  pacNotDoneReason        String?
  multipleSurgeryDoctor   String?
  exclusions              Exclusion[]
  followUpDates           FollowUpDate[]
  inclusions              Inclusion[]
  OTDetails               OTDetails[]

  @@map("estimation_details")
}

model FollowUpDate {
  id                Int               @id @default(autoincrement())
  remarks           String
  date              String
  estimationId      String
  createdBy         String?
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt
  EstimationDetails EstimationDetails @relation(fields: [estimationId], references: [estimationId])

  @@index([estimationId], map: "follow_up_date_estimationId_fkey")
  @@map("follow_up_date")
}

model Inclusion {
  id                Int               @id @default(autoincrement())
  description       String
  estimationId      String
  estimationDetails EstimationDetails @relation(fields: [estimationId], references: [estimationId])

  @@index([estimationId], map: "inclusions_estimationId_fkey")
  @@map("inclusions")
}

model Exclusion {
  id                Int               @id @default(autoincrement())
  description       String
  estimationId      String
  estimationDetails EstimationDetails @relation(fields: [estimationId], references: [estimationId])

  @@index([estimationId], map: "exclusions_estimationId_fkey")
  @@map("exclusions")
}

model Maintenance {
  id        Int      @id @default(autoincrement())
  isActive  Boolean  @default(false)
  message   String   @default("The system is under maintenance. Please try again later.")
  updatedAt DateTime @updatedAt

  @@map("maintenance")
}

model SentMessage {
  id        Int      @id @default(autoincrement())
  doctorId  Int
  alertType String   @db.VarChar(50)
  sentAt    DateTime @default(now())
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, alertType, sentAt], map: "unique_daily_alert")
  @@index([doctorId], map: "sentMessages_doctorId_fkey")
  @@map("sent_messages")
}

model LeaveDates {
  id       Int      @id @default(autoincrement())
  doctorId Int?
  date     DateTime
  Doctor   Doctor?  @relation(fields: [doctorId], references: [id])

  @@index([doctorId], map: "LeaveDates_doctorId_fkey")
}

model Advertisement {
  id                 Int                  @id @default(autoincrement())
  type               String               @db.VarChar(10)
  content            String               @db.Text
  uploadedAt         DateTime             @default(now())
  isActive           Boolean?
  AdvertisementMedia AdvertisementMedia[]
}

model AdvertisementMedia {
  id              Int           @id @default(autoincrement())
  advertisementId Int
  url             String        @db.Text
  isActive        Boolean       @default(true)
  Advertisement   Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade)

  @@index([advertisementId], map: "AdvertisementMedia_advertisementId_fkey")
}

model BloodGroup {
  id                Int                     @id @default(autoincrement())
  name              String                  @unique
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  bloodAppointments BloodGroupAppointment[]
}

model BloodGroupAppointment {
  id                Int                      @id @default(autoincrement())
  pnrNumber         String?
  firstName         String
  lastName          String?
  phoneNumber       String
  email             String?
  appointmentDate   String
  appointmentSlot   String?
  repeatChecked     Boolean                  @default(false)
  daysInterval      Int?
  numberOfTimes     Int?
  requestVia        String
  appointmentStatus String                   @default("pending")
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  checkedIn         Boolean?                 @default(false)
  emailSent         Boolean?                 @default(false)
  messageSent       Boolean?                 @default(false)
  smsSent           Boolean?                 @default(false)
  bloodGroupId      Int
  lockedBy          Int?
  userId            Int?
  username          String?
  role              UserRole?
  checkedInTime     DateTime?
  age               String?
  gender            String?
  prefix            String?
  bloodGroup        BloodGroup               @relation(fields: [bloodGroupId], references: [id])
  repeatedDates     BloodGroupRepeatedDate[]

  @@index([bloodGroupId], map: "BloodGroupAppointment_bloodGroupId_fkey")
}

model BloodGroupRepeatedDate {
  id                      Int                   @id @default(autoincrement())
  date                    String
  bloodGroupAppointmentId Int
  bloodGroupAppointment   BloodGroupAppointment @relation(fields: [bloodGroupAppointmentId], references: [id])

  @@index([bloodGroupAppointmentId], map: "BloodGroupRepeatedDate_appointmentId_fkey")
}

model Prescription {
  id              Int      @id @default(autoincrement())
  prescriptionId  String   @unique
  prescribedBy    String
  prescribedDate  String
  prn             String
  patientName     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  prescribedById  String?
  prescribedByKMC String?
  tablets         Tablet[] @relation("PrescriptionTablets")
}

model Tablet {
  id             Int          @id @default(autoincrement())
  genericName    String
  brandName      String
  frequency      String
  duration       String
  instructions   String
  quantity       Int
  prescriptionId String
  route          String?      @default("oral")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  prescription   Prescription @relation("PrescriptionTablets", fields: [prescriptionId], references: [prescriptionId], onDelete: Cascade)

  @@index([prescriptionId], map: "Tablet_prescriptionId_fkey")
}

model TabletMaster {
  id             Int              @id @default(autoincrement())
  genericName    String
  brandName      String
  type           String
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  createdBy      String?
  FavoriteTablet FavoriteTablet[]
}

model FavoriteTablet {
  id           Int          @id @default(autoincrement())
  userId       String
  tabletId     Int
  createdAt    DateTime     @default(now())
  duration     String?
  frequency    String?
  instructions String?
  tablet       TabletMaster @relation(fields: [tabletId], references: [id])

  @@unique([userId, tabletId])
  @@index([tabletId], map: "FavoriteTablet_tabletId_fkey")
}

model Allergy {
  id          Int      @id @default(autoincrement())
  prn         String
  genericName String
  notedBy     String?
  createdAt   DateTime @default(now())
}

model DoctorNote {
  id                 Int      @id @default(autoincrement())
  prn                Int
  date               String
  chiefComplaints    String?  @db.Text
  diagnosis          String?  @db.Text
  generalExamination String?  @db.Text
  clinicalNotes      String?  @db.Text
  advice             String?  @db.Text
  cvs                String?  @db.Text
  rs                 String?  @db.Text
  cns                String?  @db.Text
  pa                 String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  doctorId           Int?
  createdBy          String?
  updatedBy          String?
}

model HistoryNotes {
  id             Int      @id @default(autoincrement())
  prn            Int
  date           String
  medicalHistory String?  @db.Text
  familyHistory  String?  @db.Text
  socialHistory  String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  doctorId       Int?
  createdBy      String?
  updatedBy      String?
}

model Lab {
  id          Int                  @id @default(autoincrement())
  description String
  department  String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  orders      InvestigationOrder[] @relation("InvestigationOrderToLab")
}

model Radiology {
  id          Int                  @id @default(autoincrement())
  description String
  department  String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  orders      InvestigationOrder[] @relation("InvestigationOrderToRadiology")
}

model InvestigationOrder {
  id             Int         @id @default(autoincrement())
  prn            String
  date           String
  doctorId       Int
  doctorName     String
  remarks        String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  labTests       Lab[]       @relation("InvestigationOrderToLab")
  packages       Package[]   @relation("InvestigationOrderToPackage")
  radiologyTests Radiology[] @relation("InvestigationOrderToRadiology")
}

model SystemLock {
  id          Int       @id @default(autoincrement())
  lockType    String    @unique
  isActive    Boolean   @default(false)
  activatedAt DateTime?
  releasedAt  DateTime?
  unlockedBy  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model WhatsAppThresholdLog {
  id        Int      @id @default(autoincrement())
  threshold Int
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OTDetails {
  id                    Int               @id @default(autoincrement())
  estimationId          String
  roomNo                String
  handledBy             String
  startedTime           DateTime?
  endedTime             DateTime?
  isStarted             Boolean           @default(false)
  isEnded               Boolean           @default(false)
  remarks               String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  coordinatorId         String?
  paid                  Boolean?          @default(false)
  multipleSurgeryDoctor String?
  patientName           String?
  prn                   Int?
  surgeryDate           String?
  surgeryLevel          String?
  surgeryName           String?
  surgeryType           String?
  estimation            EstimationDetails @relation(fields: [estimationId], references: [estimationId], onDelete: Cascade)

  @@index([estimationId], map: "ot_details_estimationId_fkey")
  @@map("ot_details")
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
  completed
  rescheduled
}

enum UserRole {
  super_admin
  sub_admin
  admin
  doctor
  unknown
}
